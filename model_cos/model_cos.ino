#include "MicroFlow.h"
void quantize(double weights[], int size){
  for (int i=0;i<size;i++){
    Serial.print(weights[i]);
    Serial.print(" ");
    weights[i]=round(weights[i]);
    Serial.print(weights[i]);
    Serial.print("\n");
  }
}
void setup(){
  Serial.begin(9600);
  while(!Serial){
    ;
  }
  int topology[] = {1,16,16,1};
  int layers = 4;
  double weights[]={0.5957965, 0.17935465, 0.18232542, -0.5309471, 0.3448634, -0.68091327, 0.23043932, 0.20567554, 0.56378937, -0.671902, -0.5893166, -0.42381755, 0.100998625, 0.21762288, 0.20706847, 0.1273636, -0.5621706, 0.3312361, 0.12733944, 0.18389398, -0.24072672, 0.10829773, 0.31440762, 0.39070818, 0.33333182, 0.049403332, -0.28971675, 0.33294347, 0.025101878, 0.1054129, 0.35867533, 0.3289918, 0.8314739, -0.0016683004, -0.5324737, -0.20708214, -0.09253482, 0.42757452, -0.22369255, 0.38138902, -0.114060365, -0.047276802, -0.19687024, 0.66394526, 0.4034866, 0.47064957, 0.14596094, 0.27667025, 0.8616571, 0.38307485, -0.11859725, 0.036762834, -0.1965983, 0.31383723, 0.31702554, -0.23082127, 0.3086825, -0.06305485, 0.27420706, 0.5963745, -0.33895448, 0.15206285, 0.19818732, 0.24900301, 0.24434009, 0.011448405, 0.17914516, -0.44859916, -0.484868, -0.40730244, -0.35390428, 0.060110647, 0.30222788, 0.25672388, 0.38786295, 0.23463377, 0.33577374, 0.33223447, 0.44016284, 0.21800354, 1.0549152, -0.06458123, -1.2236934, 0.1236924, -0.32535312, -0.58389, 0.34104258, -1.4900452, -0.45527187, -0.37984544, -0.13970865, -0.24942715, 0.14293835, 0.044120517, -0.5345766, 0.40585122, 0.4639565, 0.39383626, -0.2946665, -0.3473795, 0.1185214, 0.15803684, -0.1141137, 0.18704373, -0.0469706, 0.08135931, 0.4146608, 0.3575876, 0.225572, 0.009327472, 0.33640456, -0.27957094, 0.80882263, 0.0806269, -0.010026881, 0.33176595, 0.16764104, 0.31456482, -0.3182272, 0.45369875, -0.12208925, 0.26116902, -0.06967044, 0.72380227, -0.109630905, 0.43952456, 0.5376558, 0.0386509, 0.02321433, 0.24235992, -0.50746375, -0.40362903, -0.28667727, 0.2473636, 0.09027059, -0.02651178, 0.024575109, 0.23857778, -0.15661716, -0.41486573, -0.1485209, -0.02431427, -0.40740386, -0.10865618, -0.18376236, 0.2273803, -0.22129673, 0.23861235, 0.5846892, 0.4215873, -0.31648856, 0.3701288, 0.5337395, 0.52565545, 0.16675709, 0.45957407, -0.1751437, 0.42512476, -0.19624819, 0.3685575, 0.8901007, 0.61336106, -0.15552591, 0.1462082, 0.25352138, 0.4947911, -0.02621319, -0.030491667, 0.5231295, 0.11556442, -0.57058537, -0.7704252, 0.24412443, 0.53101045, -0.20664655, -0.2764653, 0.34186262, -0.08022644, -0.12167589, -0.27137873, 0.15709794, 0.4059637, -0.3730955, 0.3318234, 0.54809654, -0.3116363, 0.70448154, 0.16685471, -0.01911201, -0.23433489, -0.13021398, 0.09847483, 0.21286206, -0.34506562, -0.21771485, 0.39844564, 0.22265603, -0.36075985, -0.15351506, -0.26606822, -0.20401329, -0.22677685, 0.3870668, 0.14033628, -0.17940453, 0.16754141, -0.19499062, -0.21286769, 0.4999084, 0.08946383, -0.18815486, 0.29078856, 0.071280934, 0.022098526, -0.0054567344, -0.40401787, 0.06890983, -0.09940764, 0.017106913, 0.24356909, 0.2304423, 0.101214044, -0.12615468, 0.26201248, 0.51305044, 0.08519819, -0.81654996, -0.26675865, -0.19237395, -0.20470273, 0.3961516, -0.5447072, -0.61942196, 0.034945834, -0.46790916, 0.109678105, 0.09984948, 0.13003659, -0.4442266, 0.3689628, 0.79659545, 0.37519088, -0.42976618, -0.031703353, 0.3749747, 0.2801301, 0.27883467, 0.40125015, 0.16011749, 0.20142066, 0.2433959, 0.5504956, 0.10526526, -0.41356438, 0.008991499, -0.068831585, 0.3384499, -0.1358812, -0.8115204, 0.4099987, 0.49315453, 0.17937627, -0.124637045, -0.7998121, 0.33301964, -0.2881411, -0.13420513, 0.55478483, -0.37485078, 0.2751933, 0.27593073, 0.14611973, -1.3744284, -0.4870894, 1.6123096, 0.048091542, -0.46903068, -0.7608111, 0.26031527, -1.1723615, -0.8566263, -0.5561273, -0.64398, 1.9297094, -0.05810025, -0.473919, -0.2873237, -0.07468474};
  double biases[] = {-0.09147583, -1.0194908, -0.9812704, -0.39470848, 2.4578536, -0.5564781, -1.4956125, 0.026063737, -1.0481589, 2.3330808, -0.9870268, 0.10228838, -0.03648402, 1.096605, -1.2268999, 0.4055509, -0.3898634, 0.019956516, -0.14926659, -0.01861461, 0.3951918, 0.3352314, 0.22459467, 0.15996657, 0.5400139, 0.19584702, -0.4851656, -0.37326917, 0.067055374, 0.0960417, 0.18027921, 0.021058546, -1.0875281};
  double inputs[] = {0};
  double output[1] = {};
  Serial.print("Here");
  MicroMLP mlp(layers, topology, weights, biases, TANH);
  for (int i=0;i<180;i++){
    inputs[0] = i * (3.14/180);
    //Feedforward pass through the network
    mlp.feedforward(inputs, output);
    Serial.print("Inputs: ");Serial.println(inputs[0]);
    Serial.print("Neural Network Output: ");Serial.println(output[0]);
    Serial.print("Actual:");Serial.println(cos(inputs[0]));
  }
}


void loop(){
  
}
